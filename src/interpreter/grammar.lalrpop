use crate::interpreter::ast::{self, process_string_escapes, process_doc_comments};
use crate::{IString, GenType};
use std::str::FromStr;
use lalrpop_util::ParseError;

grammar;

Comment: String = {
    <s:r"#.*"> => s.trim()[1..].trim().to_owned()
}

Comma<E>: Vec<E> = {
    <v0:(<E> ",")*> <e1:E?> => v0.into_iter().chain(e1).collect()
};

WithSpan<E>: ast::WithSpan<E> = {
    <start:@L> <e:E> <end:@R> => ast::WithSpan {
        span: ast::Span { start, end },
        value: e,
    }
}

BooleanLiteral: bool = {
    "true" => true,
    "false" => false
}

IntLiteral: u64 = {
    <s:r"0x[0-9a-fA-F]+"> => u64::from_str_radix(&s[2..], 16).unwrap(),
    <s:r"[0-9]+"> => u64::from_str(s).unwrap()
};

SignedIntLiteral: i64 = {
    <s:r"[-+][0-9]+"> => i64::from_str(s).unwrap()
}

DecimalLiteral: f64 = {
    <s:r"[-+]?[0-9]+\.[0-9]+"> => f64::from_str(s).unwrap()
};

StringLiteral: IString = {
    //<s:r#""([^"\\]*(\\.[^"\\]*)*)""#> => s[1..s.len() - 1].replace(r#"\""#, r#"""#).replace("\\n", "\n")
    <s:r#""([^"\\]*(\\.[^"\\]*)*)""#> =>? {
        process_string_escapes(&s[1..(s.len() - 1)]).map_err(|e| {
            eprintln!("invalid string literal: {}", e);
            ParseError::User { error: e}
        })
    }
};

CharLiteral: char = {
    <c:r"'[^']+'"> =>? {
        process_string_escapes(&c[1..(c.len() - 1)]).map_err(|e| {
            eprintln!("invalid char literal: {}", e);
            ParseError::User { error: e}
        }).map(|s| s.chars().next().unwrap())
    }
}


BinLiteral: Vec<u8> = {
    "[" <b:Comma<IntLiteral>> "]" =>? {
        b.into_iter().map(|i| {
            if i <= 255 {
                Ok(i as u8)
            } else {
                Err(ParseError::User { error: "Invalid byte value is out of range" })
            }
        }).collect()
    }
}

ExprInner: ast::Expr = {
    <b:BinLiteral> => ast::Expr::BinaryLiteral(b),
    <l:CharLiteral> => ast::Expr::CharLiteral(l),
    <b:BooleanLiteral> => ast::Expr::BooleanLiteral(b),
    <s:StringLiteral> => ast::Expr::StringLiteral(s),
    <i:IntLiteral> => ast::Expr::IntLiteral(i),
    <i:SignedIntLiteral> => ast::Expr::SignedIntLiteral(i),
    <d:DecimalLiteral> => ast::Expr::DecimalLiteral(d),
    <f:FunctionCall> => ast::Expr::Function(f),
    <n:FunctionName> => ast::Expr::ArgumentUsage(n)
};

pub Expr: ast::WithSpan<ast::Expr> = {
    <c:Comment*> <e:WithSpan<ExprInner>> <c2:Comment*> => e
}

FunctionCall: ast::FunctionCall = {
    <n:FunctionName>"(" <a:Comma<Expr>> ")" => ast::FunctionCall { function_name: n, args: a, mapper: None },
    <n:FunctionName>"(" <a:Comma<Expr>> ")" "{" <ma:FunctionName> "->" <m:Expr> "}" => {
        ast::FunctionCall {
            function_name: n, 
            args: a, 
            mapper: Some(Box::new(ast::FunctionMapper {
                arg_name: ma,
                mapper_body: m,
            }))
        }
    }
};

FunctionName: IString = {
    <s:r"[a-zA-Z]+[a-zA-Z0-9_]*(\.[a-zA-Z0-9_]+)?"> => s.into()
};

GenType: GenType = {
    "Uint" => GenType::Uint,
    "String" => GenType::String,
    "Int" => GenType::Int,
    "Boolean" => GenType::Boolean,
    "Float" => GenType::Decimal,
    "Char" => GenType::Char,
    "Bin" => GenType::Bin,
}

MacroArg: ast::MacroArgument = {
    <n:FunctionName> ":" <t:GenType>  => ast::MacroArgument {name: n, arg_type: t}
}

DefineMacro: ast::WithSpan<ast::MacroDef> = {
    <c:Comment*> <start:@L> "def" <n:FunctionName> "(" <args:Comma<MacroArg>> ")" "=" <e:Expr> ";" <end:@R> => {
        ast::WithSpan {
            span: ast::Span {start, end },
            value: ast::MacroDef { 
                name: n, 
                args: args, 
                body: e, 
                doc_comments: process_doc_comments(c) 
            }
        }
    }
}


pub Program: ast::Program = {
    <m:DefineMacro*> => ast::Program {assignments: m, expr: None },
    <m:DefineMacro*> <e:Expr> => ast::Program {assignments: m, expr: Some(e) }
}
