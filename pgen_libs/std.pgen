
# Generates boolan values with the given frequency of `true`. The frequency must be between 0 and 1
def boolean(true_frequency: Float) = either(true_frequency(), true, false);

# Generates boolan values with a frequency of 0.5
def boolean() = either(true, false);

# Adds a newline character after the given value
def trailing_newline(value: String) = concat(value(), "\n");

# Surround the values from the first generator with productions form the second one. Note that this might put different values
# at the beginning and end if the second argument is not a constant
def surround(middle: String, beginningAndEnd: String) = concat(beginningAndEnd(), middle(), beginningAndEnd());

# surround the given value in double quote characters 
def double_quote(value: String) = surround(value(), "\"");

# alias for `double_quote(String)`
def quote(value: String) = double_quote(value());

# surround the given value in single quote characters
def single_quote(value: String) = surround(value(), "'");

# produces a csv header row with the given number of random column names
def easy_csv_headers(column_count: Uint, quote_char: String, value_separator: String, line_separator: String) = 
    concat(
        repeat_delimited(
            column_count(), 
            surround(alphanumeric_string(uint(4, 50)), quote_char()),
            value_separator()
        ),
        line_separator()
    );

# produces a row of random csv values 
def easy_csv_row(column_count: Uint, quote_char: String, value_separator: String, line_separator: String) = 
    concat(
        repeat_delimited(
            column_count(),
            surround(
                one_of(
                    alphanumeric_string(uint(0, 60)),
                    uint(),
                    boolean()
                ), 
                quote_char()
            ),
            value_separator()
        ),
        line_separator()
    );

# produces a csv with the given number of columns and rows
def easy_csv(column_count: Uint, row_count: Uint, quote_char: String, value_separator: String, line_separator: String) = 
    concat(
        easy_csv_headers(column_count(), quote_char(), value_separator(), line_separator()),
        repeat(
            row_count(), 
            easy_csv_row(column_count(), quote_char(), value_separator(), line_separator())
        )
    );

# produces a csv with the given number of columns and rows. All the values will be quoted using double quotes.
# The value separator will be a comma, and the line separator will be a linefeed.
def easy_csv(column_count: Uint, row_count: Uint) = easy_csv(column_count(), row_count(), "\"", ",", "\n");
    
